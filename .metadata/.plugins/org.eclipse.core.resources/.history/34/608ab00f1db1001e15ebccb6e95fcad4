package mes.master.biz;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.jdom.Document;
import org.springframework.util.LinkedCaseInsensitiveMap;

import kr.co.mesframe.esb.ObjectExecuteService;
import kr.co.mesframe.orm.sql.SqlMesTemplate;
import kr.co.mesframe.orm.sql.constant.SqlConstant;
import kr.co.mesframe.orm.sql.util.AddHistory;
import kr.co.mesframe.txninfo.TxnInfo;
import kr.co.mesframe.util.ConvertUtil;
import kr.co.mesframe.util.DateUtil;
import mes.errorHandler.CustomException;
import mes.event.MessageParse;
import mes.master.data.DY_PROCWORKORDER;
import mes.util.EventInfoUtil;

/**
 * @author LSMESSolution
 * 
 * @since 2023.11.27
 * 
 * @see
 */
public class TxnProcWorkOrderForParts implements ObjectExecuteService {

	/**
	 * 생산계획 순서 변경
	 * 
	 * @param recvDoc
	 * @return Object
	 * 
	 */
	@Override
	public Object execute(Document recvDoc) {
		List<HashMap<String, String>> masterData = MessageParse.getDefaultXmlParse(recvDoc);
		TxnInfo txnInfo = EventInfoUtil.setTxnInfo(recvDoc);

		for (int i = 0; i < masterData.size(); i++) {
			HashMap<String, String> dataMap = (HashMap<String, String>) masterData.get(i);
			txnInfo.setEventTimeKey(DateUtil.getCurrentEventTimeKey());

			String workDate = dataMap.get("WORKDATE");

			LocalDate planDate = LocalDate.parse(workDate, DateTimeFormatter.ofPattern("yyyyMMdd"));
			if(!LocalDate.now().equals(planDate)) {
				throw new CustomException("CM-999","확정 기준 일자(계획)와 실제(당일) 일자가 다릅니다. 확인 후 다시 처리 하시기 바랍니다.");
			}

			DY_PROCWORKORDER procworkorder = new DY_PROCWORKORDER();
			procworkorder.setKeyPLANTID(dataMap.get("PLANTID"));
			procworkorder.setKeyDATAKEY(dataMap.get("DATAKEY"));

			procworkorder.setPLANSTARTDATE(dataMap.get("PLANSTARTDATE"));
			procworkorder.setPLANSTARTTIME("000000");
			procworkorder.setPLANSTARTPRIOR(Integer.parseInt(dataMap.get("PLANSTARTPRIOR")));
			if(dataMap.containsKey("ISSUE")) procworkorder.setISSUE(dataMap.get("ISSUE"));

			procworkorder.excuteDML(SqlConstant.DML_UPDATE);
			
			// History 기록이 필요한 경우 사용
            AddHistory history = new AddHistory();
            history.addHistory(procworkorder, txnInfo, "U");

		}

		return recvDoc;
	}

	
}
